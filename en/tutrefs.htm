<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML 2.0//EN">
<HTML><HEAD>
<TITLE>References</TITLE>
<LINK REL="stylesheet" type="text/css" href="tutor.css">
<LINK REL="stylesheet" type="text/css" href="colors.css">
</HEAD>
<BODY BGCOLOR="#CCBBCC">

<CENTER><H1>References</H1></CENTER>
<HR>
<CENTER>
<A HREF="#Books">Books</A>&nbsp&nbsp
<A HREF="#Webs">Web Sites</A>&nbsp&nbsp
<A HREF="#Projects">Project Ideas</A>&nbsp&nbsp
<A HREF="#Topics">Study Topics</A>&nbsp&nbsp
</CENTER>

<HR>
<A NAME="Books">
<H2>Books to read</H2>

<H4>Python</H4>
<DL>
<DT>Learning Python
<DD>Mark Lutz - O'Reilly press. Probably the best book on
programming Python if you already know another language. Typical
O'Reilly style, so if you don't like that you may prefer:</P></DD>
<DT>Python - How to Program
<DD>Dietel & Dietel - ???
This takes a fairly fast paced trip through Python and introduces 
lots of the interesting packages you might like to use 
- TCP/IP networking, Web programming, PyGame etc. It's big 
but very comprehensive, although not in-depth.
<DT>Programming Python
<DD>Mark Lutz - O'Reilly press. The classic text. The second edition
has less tutorial (his Learning Python book now covers that ground)
but describes the whys and wherefores of the language better than 
many of the the others, it is strong on coverage of the more unusual 
modules and OOP. 
<DT>Python Programming on Win32
<DD>Mark Hammond & Andy Robinson - O'Reilly press. This is an 
essential read if you are serious about using Python on a Windows 
box. It covers access to the registry, ActiveX/COM programming, 
various GUIS etc.
<DT>Python and Tkinter Programming
<DD>John Grayson - Manning press. This is the only real in depth 
book on Tkinter and does a fair job of covering the ground, 
including the bolt-on PMW set of widgets. Its not a basic tutorial 
but it does provide a reasonable reference for the serious Tkinter 
GUI programmer.
<DT>Python in a Nutshell
<DD>Alex Martelli - O'Reilly press. Alex is one of the mainstays 
of the Usenet Python community and hit Nutshell book is the best 
concise reference on Python currently available. It is not a 
tutorial although it does cover the basics as well as most of 
the common modules.
<DT>Python Essential Reference
<DD>David Beasley - New Riders. This is New Riders equivalent 
to O'Reilly's Nutshell book. It is similar in scope but slightly 
slimmer and based on Python 2.1 rather than Martelli's 2.2. 
Unfortunately for Beasley a lot of new stuff appeared in 2.2 
so he misses out in the best reference award. Still an excellent 
book.
</DL>
<P>There is also an excellent online book for more advanced 
Python programmers called 
<A href="http://diveintopython.org/">Dive into Python</A>
</P>

<P>There is now a new generation of Python books appearing 
on specialist topics, there are books focusing on text 
handling, GUI programming, Network programming, Web and XML 
programming, Scientific computing etc etc. Python is really 
coming of age as a language and the number and depth of 
books now available reflects that.

<H4>Tcl/Tk</H4>
<DL>
<DT>Tcl and the Tk toolkit
<DD>John Ousterhout - Addison Wesley. The classic on Tcl/Tk by the 
language's creator. Very much a reference book and rather out 
of date now. It needs a 2nd edition. The Tk section is of 
interest to any Tk user regardless of language 
(Tk is a GUI library and is  implemented on Tcl, Perl and Python).

<DT>Tcl/Tk in a Nutshell
<DD>Raines & Tranter - O'Reilly press. This is the book I 
turn to first when looking for Tk information. It's only the 
first couple of sections that interest the Python programmer 
since that's where the bits relevant to Tkinter live. On the 
other hand, you might like the look of Tcl too and be 
motivated to experiment, and that's never a bad thing!  
</DL>

<H4>VBScript</H4>
<P>There are several books on VBScript but the only ones 
I have used and can thus recommend are:
<DL>
<DT>Windows Script Host
<DD>Dino Esposito - Wrox press(now defunct). A good intro to 
WSH including both VBScript and JScript. But its not a tutorial 
and the reference section is very brief.
<DT>VBScript in a Nutshell
<DD>Lomax et al - O'Reilly press. Good reference but the 
tutorial section is very sparse and only suitable if you 
know how to program (eg. you've done my tutor! :-). As a 
reference it is quite good but misses out by not providing 
a code example per function.
</DL>

<H4>JavaScript</H4>

<P>There are lots of books on JavaScript but most of them 
focus very heavily on the Web, it can be hard sometimes to 
disentangle what features are JavaScript the programming 
language, and what are web browser features. The best 
JavaScript books that I know are:
<DL>
<DT>JavaScript the Definitive Guide
<DD>Flanagan - O'Reilly press. This was indeed the definitive 
guide for a long time and although getting a little old 
now is still the best single book on the subject, if a little 
dry.
<DT>The JavaScript Bible
<DD>Danny Goodman - SAMS(?). This gets good reviews from 
friends and colleagues but I confess not to having read it. 
It is supposed to be a slightly more readable book than the 
Flanagan one.

<P>There are lots of others, read the reviews, choose your 
budget and pick one.
</DL>

<H3>General Programming</H3>

<P>There are some classic programming texts that any serious
programmer should own and read regularly. Here are my personal
favorites:
<DL>
<DT>Code Complete
<DD>Steve McConnell - Microsoft Press. This is the most
complete reference on all things to do with writing code that
I know. I read it after several years of experience and it all
rang true and I even learnt some new tricks. It literally
changed the way I wrote programs. Buy it. Now!</P>
<DT>Programming Pearls
<DD>Jon Bentley - Addison Wesley. There are two volumes, both
invaluable. Bentley shows how to improve the efficiency of your
programs in every conceivable way, from concept through design 
to implementation. 
<P>These are part of a programming library that
came out of Bell Labs in the 1980's in the wake of Unix. There
are so many classics in this series that I will simply say that 
anything from the pens of Ken Thompson, Jon Bentley, Dennis
Ritchie, Andrew Koenig and the rest at Bell Labs is worth
reading. The styles may vary but the content is pure gold.</P>
<DT>Algorithms by Donald Knuth
<DD>This is a set of books describing fundamental algorithms
that are used by programmers over and over again. Heavy going,
and a bit mathematical but, if you are concerned about the efficiency
and absolute correctness of your programs, they are worth
searching out. The whole set has recently been reissued with
some updates.
</DL>

<H3>Object Oriented Programming</H3>

<P>I've already mentioned these, but here they are again anyway:
<DL>
<DT>Object Oriented Analysis 
<DD>Peter Coad & Ed Yourdon. - A great intro to OO concepts with
a very simple notation for recording your designs. As an added
bonus the notation is very similar to the new Unified Modeling
Language (UML) standard that is being adopted by most books, 
tools and journals.</P>
<DT>Object Oriented Analysis and Design with Applications
<DD>Grady Booch - Benjamin Cummings. This is another excellent
book, moving more into the detail of designing classes and
objects.The 1st edition, if you can find it, illustrates the
lessons in 5 different OO languages whereas the second edition
only uses C++ and is the poorer for it. It uses Booch's own
notation which in my opinion is still the best notation so far
seen but it is being eclipsed by UML and so is effectively
obsolete. Booch is reputed to be bringing out a new edition
using UML, but it's been a long time coming...</P>
<DT>Object Oriented Software Construction (2nd Ed)
<DD>Bertrand Meyer. Meyer has his own OOP language - Eiffel and
uses it to teach OO very effectively. Because Eiffel is
(unfairly) a bit of a minority interest the book takes a little
extra effort to read. It is undoubtedly worth it for the sheer 
breadth of coverage of the current OO technology scene.
</DL>

<H5>Other books worth reading are:</H5>
<DL>
<DT>Object Oriented Design Patterns
<DD>Gamma, Johnson et al. A revolutionary book when it came out.
It contains a number of common OO design patterns and, perhaps 
more importantly, a notation for documenting them. There is now
a flourishing patterns discussion and a dedicated web site with
many additional patterns as well as variations of the ones in
the book.</P>
<DT>From Clouds to Code
<DD>Jesse Liberty(Wrox Press). This book takes you through the
process of building a real OO application - warts and all. Its
rather like our Case study but much bigger and includes use of
design tools like UML.
</DL>

<HR>
<A NAME="Webs">
<H2>Web sites to visit</H2>

<H3>Languages</H3>

<H4>Python</H4>
<LI><A href="http://www.python.org/">The Python web site</A>
<LI><A href="http://starship.python.net/crew/mhammond/">
Mark Hammond's Python for Windows page</A> connecting MS Windows and Python.
<LI><A href="http://www.pythonware.com/library/tkinter/introduction/">
A Tkinter GUI tutorial</A>
<LI><A href="http://www.zope.org/">A Powerful Web Development environment</A>
using Python.

<H4>Tcl/Tk - and thus Tkinter</H4>
<P>
<A href="http://www.tcl.tk/">The definitive Tcl site</A>

<h4>VBScript</H4>
<P>
<A href="http://msdn.microsoft.com/library/default.asp?url=/library/en-us/script56/html/vtoriVBScript.asp">
The Microsoft VBScript web site</A>

<P>There are several other online web sites for VBScript resources:
components, tips, chat-rooms etc. One such is 
<a href="http://www.visualbasicscript.com/">the VBScript Forum</a>

<H4>JavaScript</h4>
<P>There are now several sites claiming to be "the definitive 
online source for JavaScript information", but a couple of 
good ones are:
<P>
<a href="http://javascript.internet.com/">The JavaScript Source</a>
<P>
and
<P>
<a href="http://devedge.netscape.com/central/javascript/">The original Netscape site</a>


<H4>Other languages of interest</H4>
<P>Java, Perl, Smalltalk, Borland Delphi(and now Kylix), 
Tcl, Lisp/Scheme

<H3>Programming in General</H3>

<P>Try finding some general programming links pages on Yahoo, 
Google etc. There are several good ones out there, I have no 
particular favourite. The best thing to do is look for a specific 
topic of interest and usually you will find more than enough 
resources. On Usenet the <i>comp.software-eng</i> news group 
is often a good starting point. 

<H3>Object Oriented Programming</H3>

<LI><A href="http://www.cetus-links.org/"> The Cetus page</A> again
<P>some specifics
<LI><A href="http://www.rational.com">Rational Corp</A> make
upmarket tools and host some useful information about OO
development methods and the new UML modelling notation.

<HR>
<A NAME="Projects">
<H2>Projects to try</H2>

<P>There are several ideas for projects listed in the tutorial.
In addition I will give some ideas here, in approximately
ascending order of difficulty. Most will be achievable with the
skills learn't here but all of them can be improved by checking
the documentation that comes with Python for alternatives. A
couple will definitely require that you start digging for
yourself, recall that one of the requirements of a good programmer
was curiosity!</P>
<UL>
<LI>Extend the grammar checker to include the extra facilities mentioned.</P>
<LI>Build a database of your CDs and a search facility to locate
them again. Maybe also to record the last time or frequency that
you play them.</P>
<LI>Create a tool to generate HTML pages which display a list of
the files in a directory as links (so that you can open them by
clicking).</P>
</UL>

<P>Other places to look include the unique 
<a href="http://www.uselesspython.com/">Useless Python</a> web site 
which has many sample scripts plus ideas for new ones. 
They are all quite short and within the scope of a 
"graduate" of my tutorial. Finally once you feel that you are 
getting the hang of things try searching for Python projects 
on <a href="http://www.sourceforge.org">SourceForge</a> and 
join one that looks interesting. Help contribute to the open 
source revolution that brought you Python inthe first place!

<HR>
<A NAME="Topics">
<H2>Topics for further study</H2>
<P>If all the projects above still leave you looming 
for more here are a few areas for you to explore and become 
expert in:
<UL>
<LI>GUI with Tk
<LI>Web programming - CGI
<LI>Toolkits
<LI>Frameworks
<LI>Databases
</UL>

<HR WIDTH=60% ALIGN=CENTER>

<CENTER>
<P>That's all there is. If you'd like to send me feedback on any
aspect of the tutorial then  
<a href="mailto:alan.gauld@btinternet.com">send me mail</A>.<BR>
Thanks for getting here!

</BODY>
</HTML>
