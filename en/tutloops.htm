<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML 2.0//EN">
<HTML><HEAD>
<LINK REL="stylesheet" type="text/css" href="tutor.css">
<LINK REL="stylesheet" type="text/css" href="colors.css">
<TITLE>Looping the loop</TITLE>
</HEAD><BODY BGCOLOR="#CCBBCC">

<CENTER>
<H2>Looping - Or the art of repeating oneself!</H2>
<P>
<TABLE BORDER> 
<TR> <TH>What will we cover?</TH> </TR>
<TR> <TD>
<LI>How to use loops to cut down on repetitive typing. 
<LI>Different types of loop and when to use them.
</TD> </TR> 
</TABLE>
</CENTER>

<P>In the last exercise we printed out part of the 12 times
table. But it took a lot of typing and if we needed to extend it,
it would be very time consuming. Fortunately there is a better
way and it's where we start to see the real power that programming
languages offer us.</P>

<H3>FOR Loops</H3>

<P>What we are going to do is get the programming language to do
the repetition, substituting a variable which increases in value
each time it repeats. In Python it looks like this:</P>

<PRE>
>>>for i in range(1,13):
...    print "%d x 12 = %d" % (i, i*12)
...
</PRE>

<P><B>Note 1:</B> We need the <TT>range(1,13)</TT> to specify 13 because 
<TT>range()</TT> generates from the first number up to, but not including, 
the second number. This may seem somewhat bizarre at first but there are 
reasons and you get used to it.</P>

<P><B>Note 2:</B> The <TT>for</TT> operator in Python is actually 
a <I>foreach</I> operator in that it applies the subsequent code 
sequence to each member of a collection. In this case the collection 
is the list of numbers generated by <TT>range()</TT>. You can prove 
that by typing <TT>print range(1,13)</TT> at the python prompt 
and seeing what gets printed.

<P><B>Note 3:</B> The <TT>print</TT> line is <I>indented</I> 
or spaced further in than the <TT>for</TT> line above it. 
That is a very important point since it's how Python knows 
that the <TT>print</TT> is the bit to repeat. There can be 
more than a single line indented too, Python will repeat all 
of the lines that are indented for each item in the collection. 
Also, it doesn't matter how much indentation you use so long as 
it's consistent.

<P><B>Note 4:</B> In the interactive interpreter you need to hit 
return twice to get the program to run. The reason is that the 
Python interpreter can't tell whether the first one is another 
line about to be added to the loop code or not. When you hit 
Enter a second time Python assumes your finished entering code 
and runs the program.

<P>So how does the program work? Let's step through it.<BR>
First of all, python uses the range function to create a list of 
numbers from 1 to 12. 

<P>Next python makes <TT>i</TT> equal to the first value in the list, 
in this case 1. It then executes the bit of code that is 
indented, using the value i = 1:
<PRE>
   print "%d x 12 = %d" % (1, 1*12)
</PRE>

<P>Python then goes back to the <TT>for</TT> line and sets 
<TT>i</TT> to the next value in the list, this time 2. It again 
executes the indented code, this time with i = 2:
<PRE>
   print "%d x 12 = %d" % (2, 2*12)
</PRE>

<P>It keeps repeating this sequence until it has set <TT>i</TT> to 
all the values in the list. At that point it moves to 
the next command that is <B>not</B> indented - in this case 
there aren't any more commands so the program stops. 

<H4>Here's the same loop in VBScript:</H4>

<P>The simplest VBScript loop construct is called 
a <TT>For...Next</TT> loop, and is used as shown:

<PRE>
&lt;script language = "VBScript">
For I = 1 To 12
    MsgBox I & " x 12 = " & I*12
Next
&lt;/script>
</PRE>

<P>This is much more explicit and easier to see what is
happening. The value of <TT>I</TT> varies from 1 through 
to 12 and the code before the <TT>Next</TT> keyword is 
executed. In this case it just prints the result in a 
dialog box as we've seen before. The indentation is 
optional but makes the code easier to read. 

<P>Note however that although the VBScript appears more
obvious, the Python version is ultimately more flexible 
as we'll see in a moment.

<H4>And in JavaScript</H4>
<P>JavaScript uses a <TT>for</TT> construct that is common 
in many programming languages, being modeled on C. 
It looks like this:

<PRE>
&lt;Script Language = "JavaScript">
for (i=1; i &lt;= 12; i++){
    document.write(i + " x 12 = " + i*12 + "&lt;BR&gt;");
    };
&lt;/Script>
</PRE>

<P><B>Note:</B> This construct has 3 parts inside 
the parentheses:
<UL>
<LI>an <I>initializing</I> part: <TT>i = 1</TT> 
executed just once, before anything else, 
<LI>a <I>test</I> part: <TT>i &lt= 12</TT>  which is 
executed before each iteration and 
<LI>an <I>increment</I> part: <TT>i++</TT> which 
is  shorthands for "increment i by 1", and is 
executed after each iteration. 
</UL>
<P>Notice also that JavaScript encloses the repeated 
code (the <I>loop body</I> ) in braces <TT>{}</TT> and 
although that is all that is needed, technically speaking, 
it is considered good practice to indent the code inside 
the braces too, just to improve readability.

<P>The <I>loop body</I> will only execute if the <I>test</I> part 
is true. Each of these parts can contain arbitrary code 
but the test part must evaluate to a boolean value.

<H3>More about the Python <I>for</I> construct</H3>
<P>The Python for loop iterates over a sequence. 
A Sequence in Python, lest you forgot, is either a string, 
a list or a tuple. So we can write for loops that act on 
any of those. Let's try printing the letters of a word 
one by one using a for loop with a string:
<PRE>
>>> for c in 'word': print c
...
</PRE>

<P>Notice how the letters were printed, one per line.
Notice too that where the body of the loop consists 
of a single line we can add it on the same line after 
the colon(:). The colon is what tells Python that there's 
a block of code coming up next.

<P>We can also iterate over a tuple:
<PRE>
>>> for word in ('one','word', 'after', 'another'): print word
...
</PRE>

<P>This time we got each word on a line. Of course we could 
put them all on one line using the comma-at-the-end-trick. 
Simply putting a comma at the end of a print statement 
prevents Python from printing a new line character so 
that the next print statement carries on where the 
previous one left off. 
<PRE>
>>>  for word in ('one', 'word', 'after', 'another'): print word,
...
</PRE>

<P>See how the words now appear as a single line?

<P>We have already seen <TT>for</TT> with a list 
(because <tt>range()</tt> generates a list) but for completeness 
we will do it explicitly:
<PRE>
>>> for item in ['one', 2, 'three']: print item
...
</PRE>

<P>There is one caveat when using foreach style loops 
like this. The loop gives you a copy of what was in 
the collection, you can't modify the contents of the 
collection directly. So if you need to modify the 
collection you have to use an awkward kludge 
involving the index of the collection, like this:

<PRE>
myList = [1,2,3,4]
for index in range(len(myList)):
    myList[index] += 1
print myList
</PRE>

<P>That will increment each entry in <tt>myList</TT>.
If we had not used the index trick we would simply 
have incremented the copied items but not changed 
the original list.

<P>The other gotcha with for loops is that you can't 
delete items from the collection that you are iterating 
over, otherwise the loop will get confused. It's a bit 
like the old cartoon character cutting off the branch 
of a tree while sitting on it! The best way to deal with 
this situation is to use a different kind of loop, 
which we are going to discuss next. However to understand 
how to remove elements safely we need to wait until 
we cover yet another topic, that of <a href="tutbranch.htm">
branching</a>, so we will explain this subject when we get there.

<P> In version 2.2 of Python some new tricks were added to 
make for loops even more powerful but we'll cover them later.
Meanwhile it's worth noting that VBScript and JavaScript 
each have loop constructs for looping over the elements in 
a collection. I won't discuss them in detail here, but the 
VBScript construct is <TT>for each...in...</TT> and the 
JavaScript version is <TT>for...in...</TT> You can look 
them up in the relevant help pages if you want to see the 
details.

<H3>WHILE Loops</H3>

<P><TT>FOR</TT> loops are not the only type of looping construct 
available.  Which is just as well, since <TT>FOR</TT> loops 
require us to know, or be able to calculate in advance, the 
number of iterations that we want to perform. So what happens 
when we want to keep doing a specific task until something 
happens but we don't know when that something will be?  For 
example, we might want to read and process data from a file, 
but we don't know in advance how many data items the file 
contains. We just want to keep on processing data until we 
reach the end of the file. That's possible, but difficult, 
in a <TT> FOR</TT> loop.</P>

<P>To solve this problem we have another type of loop: 
the <I>WHILE</I> loop.  

<P>It looks like this in Python:</P>

<PRE>
>>> j = 1
>>> while j &lt;= 12:
...    print "%d x 12 = %d" % (j, j*12)
...    j = j + 1
</PRE>

<P>Let's walk through what's happening. 
<OL>
<LI>First we initialize <TT>j</TT> to 1, initializing the 
<I>control variable</I> of a while loop is a very 
important first step, and a frequent cause of 
errors when missed out. 
<LI>Next we execute the <TT>while</TT> statement itself, 
which evaluates a <I>boolean expression</I> 
<LI>If the result is True it proceeds to execute the 
indented block which follows. In our example <TT>j</TT> 
is less than 12 so we enter the block. 
<LI>We execute the print statement to output the first 
line of our table.
<LI>The next line of the block increments the control 
variable, <TT>j</TT>. In this case it's the last indented 
line, signifying the end of the while block. 
<LI>We go back up to the <TT>while</TT> statement 
and repeat steps 4-6 with our new value of <TT>j</TT>. 
<LI>We keep on repeating this sequence of actions 
until <TT>j</TT> reaches 13. 
<LI>At that point the <TT>while</TT> test will return 
False and we skip past the indented block to the 
next line with the same indentation as the 
<TT>while</TT> statement. 
<LI>In this case there are no other lines so the program stops.
</OL>

<P>By now that should feel pretty straightforward. 
Just one thing to point out - do you see the colon (:) 
at the end of the <TT>while</TT> (and <TT>for</TT>) 
lines above? That just tells Python that there's 
a chunk of code (a <I> block</I>) coming up. As 
we'll see in a moment, other languages have their 
own ways of telling the interpreter to group lines 
together, Python uses a combination of the colon 
and indentation.

<H3>VBScript</H3>

<P>Let's look at VBScript's version of the while loop:

<PRE>
&lt;script language="VBScript">
DIM J
J = 1
While J &lt;= 12
    MsgBox J & " x 12 = " & J*12
    J = J + 1
Wend
&lt;/script>
</PRE>

<P>This produces the same result as before but notice 
that the loop block is delimited by the keyword 
<TT>Wend</TT> (short for While End obviously!). Other 
than that it works pretty much exactly like the 
Python one.

<H3>JavaScript</H3>

<PRE>
&lt;script language="JavaScript">
j = 1;
while (j &lt;= 12){
   document.write(j," x 12 = ",j*12,"&lt;BR>");
   j = j + 1;
   }

&lt;/script>
</PRE>

<P>As you see the structure is pretty similar just 
some curly brackets or <I>braces</I> instead of the 
<TT>Wend</TT> in VBScript. Note that unlike Python, 
neither VBScript nor JavaScript need any indentation, 
that's purely to make the code more readable.

<P>Finally its worth comparing the JavaScript for 
and while loops. Recall that the for loop looked 
like this:</P>

<PRE>
for (j=1; j<=12; j++){....}
</PRE>

<P>Now, that is exactly the same structure as
the while loop, just compressed into one line.
The initializer, the test condition and the 
loop modifier are all there clearly seen.
So in fact a JavaScript for loop is simply a 
while loop in a more compact form. It would 
be possible to do without the for loop 
completely and only have while loops, and 
that's exactly what some other languages do.

<H3>More Flexible Loops</H3>

<P>Coming back to our 12 times table at the 
beginning of this section. The loop we created 
is all very well for printing out the 12
times table. But what about other values? 
Can you modify the loop to make it do the 
7 times table say? It should look like this:</P>

<PRE>
>>> for j in range(1,13):
...    print "%d x 7 = %d" % (j,j*7)
</PRE>   

<P>Now this means we have to change the 12 to a 7 twice. And if
we want another value we have to change it again. Wouldn't it be
better if we could enter the multiplier that we want? </P>

<P>We can do that by replacing the values in the print string
with another variable. Then set that variable before we run the
loop:</P>

<PRE>
>>> multiplier = 12
>>> for j in range(1,13):
...    print "%d x %d = %d" % (j, multiplier, j*multiplier)
</PRE>

<P>That's our old friend the 12 times table. But now to change to
the seven times, we only need to change the value of
'multiplier'. </P>

<P>Note that we have here combined sequencing and loops. We have
first a single command, <TT> multiplier = 12</TT> followed, <I>in
sequence</I> by a <TT>for</TT> loop.</P> 

<H3>Looping the loop</H3>

<P>Let's take the previous example one stage further. 
Suppose we want to print out all of the times tables 
from 2 to 12 (1 is too trivial to bother with). All 
we really need to do is set the multiplier variable 
as part of a loop, like this:</P>

<PRE>
>>> for multiplier in range(2,13):
...    for j in range(1,13):
...       print "%d x %d = %d" % (j,multiplier,j*multiplier)
</PRE>

<P>Notice that the part indented inside the first 
<TT>for</TT> loop is exactly the same loop that we 
started out with. It works as follows:<BR> 
<OL>
<LI>We set multiplier to the first value (2) then go
round the second loop.<BR> 
<LI>Then we set multiplier to the next
value (3) and go round the inner loop again,<BR> 
<LI>and so on. 
</OL>
<P>This technique is known as <I>nesting</I> loops. </P>

<P>One snag is that all the tables merge together, we could fix
that by just printing out a separator line at the end of the
first loop, like this:</P>

<PRE>
>>> for multiplier in range(2,13):
...    for j in range(1,13):
...       print "%d x %d = %d" % (j,multiplier,j*multiplier)
...    print "------------------- "
</PRE>

<P>Note that the second print statement lines up with the second
'for', it is the second statement in the loop sequence. Remember, 
the indenting level is very important in Python. </P>

<P>Just for comparisons sake lets see how that looks in 
JavaScript too:
<PRE>
&lt;script language = JavaScript>
for (multiplier=2; multiplier &lt; 13; multiplier++){
    for (j=1; j &lt;= 12 ; j++){
        document.write(j, " x ", multiplier, " = ", j*multiplier, "&lt;BR>");
	}
    document.write("---------------&lt;BR>");
    }
&lt;/script>
</PRE>

<P>Experiment with getting the separator to indicate which table
it follows, in effect to provide a caption. Hint: You probably
want to use the multiplier variable and a Python format string.</P>

<H3>Other loops</H3>

<P>Some languages provide more looping constructs but some kind of 
<TT>for</TT> and <TT>while</TT> are usually there. (Modula 2 
and Oberon only provide <TT>while</TT> loops since while loops 
can simulate <TT>for</TT> loops - as we saw above.) 
Other loops you might see are:</P>

<DL>
<DT>do-while
<DD>Same as a while but the test is at the end so the loop always executes at least once.</P>
<DT>repeat-until
<DD>Similar to above but the logic of the test is reversed.</P>
<DT>GOTO, JUMP, LOOP etc
<DD>Mainly seen in older languages, these usually set a marker in
the code and then explicitly jump directly to that marker.</P>
</DL>

<CENTER>
<!-- HR WIDTH=60% -->
<TABLE BORDER="1"><TR><TH>Points to remember</TH></TR>
<TR><TD> <UL>
<LI><TT>FOR</TT> loops repeat a set of commands for a fixed number 
of iterations.
<LI><TT>WHILE</TT> loops repeat a set of commands until some 
terminating condition is met. They may never execute the 
<I>body</I> of the loop if the terminating condition is false 
to start with.
<LI>Other types of loops exist but <TT>FOR</TT> and 
<TT>WHILE</TT> are nearly always provided.
<LI>Python <TT>for</TT> loops are really <TT>foreach</TT> loops 
- they operate on a list of items.
<LI>Loops may be nested one inside another.
</UL> </TR></TABLE>

<A HREF="tutseq2.htm">Previous</A>&nbsp
<A HREF="tutstyle.htm">Next</A>&nbsp
<A HREF="tutcont.htm">Contents</A>

<P><BR>If you have any questions or feedback on this page
send me mail at:
<A href="mailto:alan.gauld@btinternet.com">
alan.gauld@btinternet.com</A>
<BR>

</BODY>
</HTML>


