Index: tutbranch.htm
===================================================================
RCS file: e:/cvsrootPython/LeToPro2/en/tutbranch.htm,v
retrieving revision 1.1
retrieving revision 1.3
diff -r1.1 -r1.3
122c122
< chosen to line them up as shown purely to emphasise the 
---
> chosen to line them up as shown purely to emphasize the 
218c218
<             print "How about throwing in a free mousemat?"
---
>             print "How about throwing in a free mouse mat?"
257c257
<             MsgBox "How about throwing in a free mousemat too?"
---
>             MsgBox "How about throwing in a free mouse mat too?"
268c268
< the VBScript convertion function <TT>CInt</TT> to convert from 
---
> the VBScript conversion function <TT>CInt</TT> to convert from 
333c333
< which is simply a catch-all for anything mnot caught 
---
> which is simply a catch-all for anything not caught 
363c363
<    MsgBox "Shape not recognised"
---
>    MsgBox "Shape not recognized"
402c402
<    length = raw_input("Length: ")
---
>    length = float(raw_input("Length: "))
453c453
< while shape != 4</B>
---
> while shape != 4:</B>
455c455
<       length = raw_input("Length: ")
---
>       length = float(raw_input("Length: "))
498a499,537
> 
> <H3>Modifying collections from inside loops</H3>
> 
> <P>We mentioned in the looping topic that modifying 
> a collection from inside a loop was a difficult 
> thing to do, but never got round to explaining 
> how to do it! The reason is, we had to wait for 
> branching to be explained first. So here is 
> the solution:
> 
> <P>If we need to modify the elements of a collection 
> in place we can use a <tt>while</tt> loop to make 
> the changes as we iterate over it. We can do this 
> because in a <tt>while</tt> construct we have explicit 
> control over the index, unlike the situation in 
> a <tt>for</tt> loop where the index is automatically 
> updated. Let's see how to delete all zeros from a list:
> 
> <PRE>
> myList = [1,2,3,0,4,5,0]
> index = 0
> while index &lt; len(myList):
>    if myList[index] == 0:
>       myList.remove(myList[index])
>    else: index += 1
> print myList
> </PRE>
> 
> <P>The thing to note here is that we do <b>not</b> increment 
> the index if we remove an item, we rely on the deletion 
> moving everything up so that the old index value now points 
> at the next item in the collection. We use an <tt>if/else</tt> 
> branch to control when we increment the index. It's very 
> easy to make a mistake doing this kind of thing so test 
> your code carefully. There is another set of Python 
> functions which are specifically designed for manipulating 
> list contents and we look at them in the 
> <a href="tutfctnl.htm">Functional Programming</a> 
> topic in the advanced section of the tutorial. 
