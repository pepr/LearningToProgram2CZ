Index: tutfiles.htm
===================================================================
RCS file: e:/cvsrootPython/LeToPro2/en/tutfiles.htm,v
retrieving revision 1.1
retrieving revision 1.3
diff -r1.1 -r1.3
80,85c80,83
< identical and <TT>open()</TT> is still available and 
< for <I>backward compatibility</I> with older versions of 
< Python some people prefer <TT>open()</TT> over <TT>file()</TT>.
< I think file() is a more natural name since we are creating 
< a file object so in this tutor I will use <TT>file()</TT>, 
< just be aware that open() could be substituted just as validly.
---
> identical <TT>open()</TT> is still the preferred mechanism, 
> so we will usually use <tt>open()</tt> from now on, but 
> if you find <tt>file()</tt> more logical then 
> feel free to use that instead.
87c85
< <P><B>Note 2:</B> We read and close the file using functions
---
> <P><B>Note 3:</B> We read and close the file using functions
96,97c94,95
< <P><B>Note 3:</B> We close the file at the end with the 
< <TT>close()</TT> method. In Pytho,n files are automatically 
---
> <P><B>Note 4:</B> We close the file at the end with the 
> <TT>close()</TT> method. In Python, files are automatically 
124c122
< inp = file("menu.txt","r")
---
> inp = open("menu.txt","r")
135c133,149
< close the file. To create a 'copy' command in Python, we simply
---
> close the file. However there is one little niggle you may have 
> noticed in the previous example: the lines read from the 
> file have a <i>newline</i> character at the end, so you wind 
> up with blank lines using <tt>print</tt> (which adds its own 
> newline). To avoid that Python provides a string method called 
> <tt>strip()</tt> which will remove <i>whitespace</i>, or 
> non-printable characters, from the end of a string. If we 
> substitute the print line above with:
> 
> <pre>
> for line in inp:
>     print line.strip()
> </pre>
> 
> <P>Everything should now work just fine.
> 
> <P>To create a 'copy' command in Python, we simply
143,144c157,158
< inp = file("menu.txt","r")
< outp = file("menu.bak","w")
---
> inp = open("menu.txt","r")
> outp = open("menu.bak","w")
157,166c171,194
< <P>Did you notice that I added a print statement just to reassure
< the user that something actually happened? This kind of <I>user
< feedback</I> is usually a good idea. 
< 
< <P>Another thing to consider in this case is the use of the loop 
< to read the data line by line. Since we are just copying 
< the file and not processing the lines in any way we could use 
< another Python file operation, namely <TT>read</TT> which reads 
< the entire content of the file into a string. We can then write 
< that entire string back out again like this:
---
> <P>Did you notice that I added a print statement at the end, 
> just to reassure the user that something actually happened? 
> This kind of <I>user feedback</I> is usually a good idea. 
> 
> <P>Because we wrote out the same <tt>line</tt> that we read 
> in there was no problems with newline characters here. But 
> if we had been writing out strings which we created, or 
> which we had <tt>strip</tt>ped earlier we would have 
> needed to add a newline on to the end of the output string, 
> like this: 
> 
> <pre>
> outp.write(line + '\n') <SPAN class="comment"># \n is a newline</SPAN>
> </pre>
> 
> <P>Let's look at how we might incorporate that into 
> our copy program. Instead of simply copying the menu we will add todays date to the top. That we we can easily generate a daily menu from the easily modified text file of meals. All we need to do is write out a couple of lines at the top of the new file before copying the menu.txt file, like this:
> 
> <pre>
> <SPAN CLASS="comment"># Create daily menu based on MENU.TXT
> import time
> # First open the files to read(r) and write(w)</SPAN>
> inp = open("menu.txt","r")
> outp = open("menu.prn","w")
168,169d195
< <PRE>
< <SPAN CLASS="comment"># Create the equivalent of: COPY MENU.TXT MENU.BAK
171,173c197,199
< # First open the files to read(r) and write(w)</SPAN>
< inp = file("menu.txt","r")
< outp = file("menu.bak","w")
---
> <SPAN CLASS="comment"># Create todays date string </SPAN>
> today = time.localtime(time.time())
> theDate = time.strftime("%A %B %d", today)
175,177c201,202
< <SPAN CLASS="comment"># read whole file at once</SPAN>
< lines = inp.read()
< outp.write(lines)
---
> <SPAN CLASS="comment"># Add Banner text and a blank line</SPAN>
> outp.write("Menu for %s\n\n" % theDate) 
179c204,208
< print "1 file copied..."
---
> <SPAN CLASS="comment"># copy each line of menu.txt to new file</SPAN>
> for line in inp:
>     outp.write(line)
> 
> print "Menu created for %s..." % theDate
184d212
< </PRE>
186,194c214,288
< <P>That's a bit simpler, as well as being faster, but it is 
< less flexible when we want to do some kind of processing of 
< the data on its way through the program.
< 
< <P>One final twist is that you might want to append data to the 
< end of an existing file. One way to do that would be to open the 
< file for input, read the data into a list, append the data to the 
< list and then write the whole list out to a new version of the 
< old file. If the file is short that's not a problem but if the 
---
> </pre>
> 
> <p>Note that we use the <tt>time</tt> module to get 
> todays date (<tt>time.time()</tt>) and convert it 
> into a tuple of values <tt>(time.localtime())</tt> 
> which are then used by <tt>time.strftime()</tt> to 
> produce a string which, when inserted into a title 
> message using string formatting, looks like:
> 
> <pre>
> Menu for Sunday September 19
> 
> Spam &amp; Eggs
> Spam &amp;...
> </pre>
> 
> <P>Although we added two '\n' characters at the end 
> there is only one blank line printed, that's because one 
> of them is the newline at the end of the title itself. 
> Managing the creation and removal of newline characters 
> is one of the more annoying aspects of handling text 
> files.</p>
> 
> <TABLE BORDER>
> <TR><TD BGCOLOR="#FFDDAA">
> <h2>New lines and Operating Systems</h2>
> <BR>
> <P>The whole subject of newlines and text files is a murky 
> area of non standard implementation by different operating 
> systems. These differences have their roots in the early 
> days of data communications and the control of mechanical 
> teleprinters. Basically there are 3 different ways to 
> indicate a new line:
> <OL>
> <LI>A Carriage Return (CR) character ('\r')
> <LI>A Line Feed (LF) character ('\n')
> <LI>A CR/LF pair ('\r\n').
> </OL>
> 
> <P>All three techniques are used in different operating 
> systems. MS DOS (and therefore Windows) uses method <i>3</i>. 
> Unix (including Linux) uses method <i>2</i>. Apple in its 
> original MacOS used method <i>1</i>, but now uses method 
> <i>2</i> since MacOS X is really a variant of Unix.</P>
> <BR>
> 
> <P>So how can the poor programmer cope with this multiplicity 
> of line endings? In many languages she just has to do lots 
> of tests and take different action per OS. In more modern 
> languages, including Python, the language provides facilities 
> for dealing with the mess for you. In the case of Python 
> the assistance comes in the form of the <tt>os</tt> module 
> which can defines a variable called <tt>linesep</tt> which 
> is set to whatever the newline character is on the current 
> operating system. This makes adding newlines easy, and 
> <tt>strip()</tt> takes account of the OS when it does its 
> work of removing them, so really the simple way to stay sane, 
> so far as newlines are concerned is: always use <tt>strip()</tt> 
> to remove newlines from lines read from a file and always 
> add <tt>os.linesep</tt> to strings being written to a file.</p>
> <br>
> 
> <p>That still leaves the awkward situation where a file is 
> created on one OS and then processed on another, 
> incompatible, OS and sadly, there isn't much we can do about 
> that except to compare the end of the line with <tt>os.linesep</tt> 
> to determine what the difference is.
> </TD></TR></table>
> 
> <P>One final twist in file processing is that you might want 
> to append data to the end of an existing file. One way to 
> do that would be to open the file for input, read the data 
> into a list, append the data to the list and then write 
> the whole list out to a new version of the old file. 
> If the file is short that's not a problem but if the 
207c301
<    err = file("Errors.log","a")
---
>    err = open("Errors.log","a")
217,218c311,312
< (Recall that there is a <TT>time</TT> module that can be 
< used to find out the current date.)
---
> (Remember, from the menu example above, that the <TT>time</TT> 
> module can be used to find out the current date.)
250c344
<        store = file(filename,'r')
---
>        store = open(filename,'r')
256c350
<         store = file(filename,'w') # create new empty file
---
>         store = open(filename,'w') # create new empty file
267c361
<     store = file("addbook.dat",'w')
---
>     store = open("addbook.dat",'w')
343,345c437,439
< <P>Now the only thing left to do is call the main() function 
< when the program is run, and to do that we use a bit of Python 
< magic like this:
---
> <P>Now the only thing left to do is call the <tt>main()</tt> 
> function when the program is run, and to do that we use 
> a bit of Python magic like this:
352,357c446,451
< <P>This bit of magic allows us to use any python file as a 
< module by <TT>import</TT>ing it, or as a program by running it. 
< The difference is that when the program is imported, the 
< internal variable <TT>__name__</TT> is set to the module 
< name but when the file is run, the value of <TT>__name__</TT> 
< is set to <TT>"__main__"</TT>. Sneaky, eh?
---
> <P>This mysterious bit of code allows us to use any python 
> file as a module by <TT>import</TT>ing it, or as a program 
> by running it. The difference is that when the program 
> is imported, the internal variable <TT>__name__</TT> is 
> set to the module name but when the file is run, the value 
> of <TT>__name__</TT> is set to <TT>"__main__"</TT>. Sneaky, eh?
392,394c486,488
< WSH provides a FileSystem object which allows any WSH 
< language to read files. We will look at a JavaScript 
< example in detail then show similavcode in VBScript for 
---
> WSH provides a <tt>FileSystem</tt> object which allows 
> any WSH language to read files. We will look at a JavaScript 
> example in detail then show similar code in VBScript for 
398,408c492,503
< <P>Before we can look at the code in detail its worth 
< taking time to describe the File System <I>Object Model</I>.
< An Object Model is a set of related objects which can be 
< used by the programmer. The WSH FileSystem object model
< consists of the <TT>FSO</TT> object, a number of File 
< objects, including the <TT>TextFile</TT> object which 
< we will use. There are also some helper objects, most 
< notable of which is, for our purposes, the 
< <TT>TextStream</TT> object. Basically we will create 
< an instance of the <TT>FSO</TT> object, then use it to create 
< our <TT>TextFile</TT> objects and from these in turn 
---
> <P>Before we can look at the code in detail it's worth 
> taking time to describe the <tt>FileSystem</tt> 
> <I>Object Model</I>. An Object Model is a set of related 
> objects which can be used by the programmer. The WSH 
> <tt>FileSystem</tt> object model consists of the 
> <TT>FSO</TT> object, a number of <tt>File</tt> objects, 
> including the <TT>TextFile</TT> object which we will use. 
> There are also some helper objects, most notable of 
> which is, for our purposes, the <TT>TextStream</TT> object. 
> Basically we will create an instance of the 
> <TT>FSO</TT> object, then use it to create our 
> <TT>TextFile</TT> objects and from these in turn 
461c556
<       Set fso = CReateObject("Scripting.FileSystemObject")
---
>       Set fso = CreateObject("Scripting.FileSystemObject")
490,491c585,586
< do, but sometimes we need to process raw binary data too. This is not 
< done so often in VBScript or JavaScript so I will only cover 
---
> do, but sometimes we need to process raw binary data too. This is very 
> rarely done in VBScript or JavaScript so I will only be covering 
497,501c592,596
< text files are composed of octets, or bytes, of binary data whereby 
< each byte represents a character represents a character and the 
< end of the file is marked by a special byte pattern, known 
< generically as <I>end of file</I>, or <I>eof</I>. A binary file 
< contains arbitrary binary data and thus no specific value can 
---
> text files are composed of <i>octets</i>, or bytes, of binary data 
> whereby each byte represents a character and the end of the file 
> is marked by a special byte pattern, known generically as 
> <I>end of file</I>, or <I>eof</I>. A binary file contains 
> arbitrary binary data and thus no specific value can 
504,507c599,604
< of this is that when we open a file in Python (or indeed any 
< other language) we must specify that it is being opened 
< in binary mode. The way we do this in Python is to add 
< a 'b' to the mode parameter, like this:
---
> of this is that when we open a binary file in Python (or 
> indeed any other language) we must specify that it is being 
> opened in binary mode or risk the file being truncated at 
> the first <tt>eof</tt> character that Python finds in the data. 
> The way we do this in Python is to add a 'b' to the mode 
> parameter, like this:
525c622
< close the file correctly.
---
> close the file correctly.</P>
528,530c625,628
< <P><TABLE>
< <TR><TH>Data Representation and Storage</TH></TR>
< <TR><TD>
---
> <TABLE BORDER>
> <TR><TD BGCOLOR="#FFDDAA">
> <h2>Data Representation and Storage</h2>
> <br>
552c650
< coding. Python by default supports ASCII and by prepending 
---
> coding. Python by default supports ASCII and by pre-pending 
562,563c660,661
< and opeating systems use these. For example, the American 
< Institute of Electrical and Electonic Engineering 
---
> and operating systems use these. For example, the American 
> Institute of Electrical and Electronic Engineering 
592c690
< <P>There are many different convertion format codes but 
---
> <P>There are many different conversion format codes but 
598c696
< of codes with numbers prepended to indicate how many of 
---
> of codes with numbers pre-pended to indicate how many of 
629c727
< that string is the number we need inthe <TT>struct</TT> 
---
> that string is the number we need in the <TT>struct</TT> 
633c731
< containg the binary representation of our address. Now that 
---
> containing the binary representation of our address. Now that 
678c776
< <P>Ok, we know that our data will comprize 4 bytes for the number 
---
> <P>Ok, we know that our data will comprise 4 bytes for the number 
